counter <- counter+1
}
n.grid <- round(1.3^(2:40))
summary(n.grid)
n.length <- length(n.grid)
uppers <- vector(length = n.length)
lowers <- vector(length = n.length)
estimates <- vector(length = n.length)
counter <- 1
for(n in n.grid){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
conf <- confint(fit, parm=c("ma1"), level=0.95)
estimates[counter] <-  fit$coef[1]
uppers[counter] <- conf[2]
lowers[counter] <- conf[1]
counter <- counter+1
}
#now plot
results.df <- data.frame(grid=n.grid, lowers,uppers,estimates)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))
n.grid <- round(1.3^(2:50))
summary(n.grid)
n.length <- length(n.grid)
uppers <- vector(length = n.length)
lowers <- vector(length = n.length)
estimates <- vector(length = n.length)
counter <- 1
for(n in n.grid){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
conf <- confint(fit, parm=c("ma1"), level=0.95)
estimates[counter] <-  fit$coef[1]
uppers[counter] <- conf[2]
lowers[counter] <- conf[1]
counter <- counter+1
}
#now plot
results.df <- data.frame(grid=n.grid, lowers,uppers,estimates)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))
n.grid <- round(1.3^(2:40))
summary(n.grid)
n.length <- length(n.grid)
uppers <- vector(length = n.length)
lowers <- vector(length = n.length)
estimates <- vector(length = n.length)
counter <- 1
for(n in n.grid){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
conf <- confint(fit, parm=c("ma1"), level=0.95)
estimates[counter] <-  fit$coef[1]
uppers[counter] <- conf[2]
lowers[counter] <- conf[1]
counter <- counter+1
}
#now plot
results.df <- data.frame(grid=n.grid, lowers,uppers,estimates)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))
n <- 10000
n.reps <- 1000
coeffs <- vector(length=nreps)
coeffs <- vector(length=n.reps)
for(j in 1:n.reps){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
coeffs[j] <- fit$coef[1]
}
summary(coeffs)
n <- 10000
n.reps <- 2000
coeffs <- vector(length=n.reps)
for(j in 1:n.reps){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
coeffs[j] <- fit$coef[1]
}
summary(coeffs)
coeffs <- vector(length=n.reps)
for(j in 2:n.reps){
x <- arima.sim(c(0,0,1),n)
fit <- arima(x,order=c(0,0,1))
coeffs[j] <- fit$coef[1]
}
?arima.sim
j <- 2
x <- arima.sim(n=n, list(ma=c(0,0.3)))
fit <- arima(x,order=c(0,0,1))
fit$coef[1]
coeffs <- vector(length=n.reps)
for(j in 1:n.reps){
x <- arima.sim(n=n, list(ma=c(0,0.3)))
fit <- arima(x,order=c(0,0,1))
coeffs[j] <- fit$coef[1]
}
summary(coeffs)
install.packages("Rmarkdown")
install.packages("rmarkdown")
render("Arima_illustration.Rmd")
library(rmarkdown)
render("Arima_illustration.Rmd")
getwd()
list.files()
setwd("C:\\Users\\KHoppe\\Documents\\R-snippets\\Time_series_forecasting")
render("Arima_illustration.Rmd")
getwd()
setwd("C:\\Users\\KHoppe\\Documents\\R-snippets\\Time_series_forecasting")
getwd()
render("Arima_illustration.Rmd")
render("Arima_illustration.Rmd")
n <- 100
beta <- 0.3
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
coeftest(fit)
n <- 10000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
n <- 10000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=10)
n <- 10000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=10)
plot(x)
n <- 10000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=10)
plot(x, type="l")
n <- 5000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=10)
plot(x, type="l")
mean(x)
n <- 5000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=100)
plot(x, type="l")
x[5000]
fitted.values(fit)[5000]
fit$residuals[5000]
?arima
shock <- x[5000]+fit$residuals[5000]
shock <- x[5000]-fit$residuals[5000]
shock
x[5000]+0.3*shock
shock <- x[5000]+fit$residuals[5000]
x[5000]+0.3*shock
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))+
theme_minimal()
n <- 100
beta <- 0.3
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
coeftest(fit)
#confidence interval around it:
confint(fit, parm=c("ma1"), level=0.95)
n.grid <- round(1.3^(2:40))
summary(n.grid)
n.length <- length(n.grid)
uppers <- vector(length = n.length)
lowers <- vector(length = n.length)
estimates <- vector(length = n.length)
counter <- 1
for(n in n.grid){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
conf <- confint(fit, parm=c("ma1"), level=0.95)
estimates[counter] <-  fit$coef[1]
uppers[counter] <- conf[2]
lowers[counter] <- conf[1]
counter <- counter+1
}
#now plot
results.df <- data.frame(grid=n.grid, lowers,uppers,estimates)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))+
theme_minimal()
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))
head(results.df)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))+
theme_minimal()
n <- 5000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=5)
plot(x, type="l")
mean(x)
fit
n <- 50000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
predict(fit, n.ahead=5)
plot(x, type="l")
fit
mean(x)
n <- 50000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1),include.mean=FALSE)
predict(fit, n.ahead=5)
plot(x, type="l")
n <- 100
beta <- 0.3
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1),include.mean=FALSE)
coeftest(fit)
#confidence interval around it:
confint(fit, parm=c("ma1"), level=0.95)
n.grid <- round(1.3^(2:40))
summary(n.grid)
n.length <- length(n.grid)
uppers <- vector(length = n.length)
lowers <- vector(length = n.length)
estimates <- vector(length = n.length)
counter <- 1
for(n in n.grid){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1))
conf <- confint(fit, parm=c("ma1"), level=0.95)
estimates[counter] <-  fit$coef[1]
uppers[counter] <- conf[2]
lowers[counter] <- conf[1]
counter <- counter+1
}
#now plot
results.df <- data.frame(grid=n.grid, lowers,uppers,estimates)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))+
theme_minimal()
n.grid <- round(1.3^(2:40))
summary(n.grid)
n.length <- length(n.grid)
uppers <- vector(length = n.length)
lowers <- vector(length = n.length)
estimates <- vector(length = n.length)
counter <- 1
for(n in n.grid){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1),include.mean = FALSE)
conf <- confint(fit, parm=c("ma1"), level=0.95)
estimates[counter] <-  fit$coef[1]
uppers[counter] <- conf[2]
lowers[counter] <- conf[1]
counter <- counter+1
}
#now plot
results.df <- data.frame(grid=n.grid, lowers,uppers,estimates)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))+
theme_minimal()
fit
n <- 10000
n.reps <- 2000
coeffs <- vector(length=n.reps)
for(j in 1:n.reps){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1), include.mean = FALSE)
coeffs[j] <- fit$coef[1]
}
for(j in 1:n.reps){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1), include.mean = FALSE)
coeffs[j] <- fit$coef[1]
}
summary(coeffs)
n <- 5000
n.reps <- 3000
coeffs <- vector(length=n.reps)
n.reps <- 2000
coeffs <- vector(length=n.reps)
for(j in 1:n.reps){
#generate the data:
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1), include.mean = FALSE)
coeffs[j] <- fit$coef[1]
}
summary(coeffs)
ggplot(results.df) +
geom_line(aes(grid,estimates))+
geom_abline(slope=0,intercept = beta, linetype="dashed")+
geom_ribbon(aes(x=grid, ymin=lowers,ymax=uppers),alpha=0.2)+
coord_cartesian(ylim=c(0.15,0.45))+
theme_minimal()
fit$coef
beta03.vec <- -0.3^(1:n)
beta03.vec[1:10]
beta03.vec <- -0.3^(0:n)
beta03.vec[1:10]
beta03.vec <- (-0.3)^(0:n)
beta03.vec[1:10]
X03 <- sum(beta03.vec*x)*0.3
length(x)
n <- 50000
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
fit <- arima(x,order=c(0,0,1),include.mean=FALSE)
predict(fit, n.ahead=5)
rev(1:10)
beta03.vec <- (-0.3)^(0:(n-1))
beta035.vec <- (-0.35)^(0:(n-1))
X03 <- sum(beta03.vec*rev(x))*0.3
X035 <- sum(beta035.vec*rev(x))*0.35
X03
X035 <- sum(beta035.vec*rev(x))*0.35
(X03 <- sum(beta03.vec*rev(x))*0.3)
(X035 <- sum(beta035.vec*rev(x))*0.35)
x035/x03
X035/X03
getwd()
render("Arima_illustration.Rmd")
n <- 50
beta <- 0.3
eps <- rnorm(n)
x <- vector(length = n)
x[1] <- eps[1]
for(i in 2:n){
x[i] <- eps[i]+beta*eps[i-1]
}
#do the fitting
fit <- arima(x,order=c(0,0,1),include.mean=FALSE)
coeftest(fit)
render("Arima_illustration.Rmd")
install.packages("prettydoc")
setwd("C:\\Users\\KHoppe\\Documents\\GitHub\\Data-Science-and-Operations-Research\\Tutorials")
render("Arima_illustration.Rmd")
getwd()
setwd("C:\\Users\\KHoppe\\Documents\\GitHub\\Data-Science-and-Operations-Research\\Tutorials")
getwd()
setwd("C:\\Users\\KHoppe\\Documents\\GitHub\\Data-Science-and-Operations-Research\\Tutorials")
getwd()
?setwd
setwd("C:\\Users\\KHoppe\\Documents\\GitHub\\Data-Science-and-Operations-Research\\Tutorials\\")
getwd()
setwd("C:\\Users\\KHoppe\\Documents\\GitHub\\Data-Science-and-Operations-Research\\")
getwd()
list.files()
setwd("~/Tutorials")
setwd("C:\\Users\\KHoppe\\Documents\\GitHub\\Data-Science-and-Operations-Research\\Tutorials")
getwd()
render("Arima_illustration.Rmd")
